import numpy as np

# np.random.seed(12)  # одинаковые вероятности
from scipy import stats
from scipy.stats import poisson, bernoulli, norm
from collections import defaultdict
from tqdm import tqdm

# графики
import matplotlib.pyplot as plt
import seaborn as sns

sns.set()

# число симуляций
N_sim = 10

# стратегия по умолчанию
default_strategy = {(100, 30): 0, (100, 28): 0, (100, 26): 0, (100, 24): 0, (100, 22): 0, (100, 20): 0, (100, 18): 0,
                    (100, 16): 0, (100, 14): 0, (100, 12): 0, (100, 10): 0, (100, 8): 0, (100, 6): 0, (100, 4): 0,
                    (100, 2): 0, (98, 30): 0, (98, 28): 0, (98, 26): 0, (98, 24): 0, (98, 22): 0, (98, 20): 0,
                    (98, 18): 0, (98, 16): 0, (98, 14): 0, (98, 12): 0, (98, 10): 0, (98, 8): 0, (98, 6): 0,
                    (98, 4): 10, (98, 2): 40, (96, 30): 0, (96, 28): 0, (96, 26): 0, (96, 24): 0, (96, 22): 0,
                    (96, 20): 0, (96, 18): 0, (96, 16): 0, (96, 14): 0, (96, 12): 0, (96, 10): 0, (96, 8): 10,
                    (96, 6): 20, (96, 4): 20, (96, 2): 40, (94, 30): 0, (94, 28): 0, (94, 26): 0, (94, 24): 0,
                    (94, 22): 0, (94, 20): 0, (94, 18): 0, (94, 16): 0, (94, 14): 0, (94, 12): 10, (94, 10): 10,
                    (94, 8): 10, (94, 6): 20, (94, 4): 20, (94, 2): 40, (92, 30): 0, (92, 28): 0, (92, 26): 0,
                    (92, 24): 0, (92, 22): 0, (92, 20): 0, (92, 18): 0, (92, 16): 0, (92, 14): 0, (92, 12): 10,
                    (92, 10): 10, (92, 8): 10, (92, 6): 20, (92, 4): 20, (92, 2): 40, (90, 30): 0, (90, 28): 0,
                    (90, 26): 0, (90, 24): 0, (90, 22): 0, (90, 20): 0, (90, 18): 0, (90, 16): 0, (90, 14): 0,
                    (90, 12): 20, (90, 10): 20, (90, 8): 20, (90, 6): 30, (90, 4): 40, (90, 2): 50, (88, 30): 0,
                    (88, 28): 0, (88, 26): 0, (88, 24): 0, (88, 22): 0, (88, 20): 0, (88, 18): 0, (88, 16): 0,
                    (88, 14): 0, (88, 12): 20, (88, 10): 20, (88, 8): 20, (88, 6): 30, (88, 4): 40, (88, 2): 50,
                    (86, 30): 0, (86, 28): 0, (86, 26): 0, (86, 24): 0, (86, 22): 0, (86, 20): 0, (86, 18): 0,
                    (86, 16): 0, (86, 14): 0, (86, 12): 20, (86, 10): 20, (86, 8): 20, (86, 6): 30, (86, 4): 40,
                    (86, 2): 50, (84, 30): 0, (84, 28): 0, (84, 26): 0, (84, 24): 0, (84, 22): 0, (84, 20): 0,
                    (84, 18): 0, (84, 16): 0, (84, 14): 0, (84, 12): 20, (84, 10): 20, (84, 8): 20, (84, 6): 30,
                    (84, 4): 40, (84, 2): 50, (82, 30): 0, (82, 28): 0, (82, 26): 0, (82, 24): 0, (82, 22): 0,
                    (82, 20): 0, (82, 18): 0, (82, 16): 0, (82, 14): 0, (82, 12): 20, (82, 10): 20, (82, 8): 20,
                    (82, 6): 30, (82, 4): 40, (82, 2): 50, (80, 30): 0, (80, 28): 0, (80, 26): 0, (80, 24): 0,
                    (80, 22): 0, (80, 20): 0, (80, 18): 0, (80, 16): 0, (80, 14): 10, (80, 12): 20, (80, 10): 20,
                    (80, 8): 20, (80, 6): 30, (80, 4): 40, (80, 2): 60, (78, 30): 0, (78, 28): 0, (78, 26): 0,
                    (78, 24): 0, (78, 22): 0, (78, 20): 0, (78, 18): 0, (78, 16): 0, (78, 14): 10, (78, 12): 20,
                    (78, 10): 20, (78, 8): 20, (78, 6): 30, (78, 4): 40, (78, 2): 60, (76, 30): 0, (76, 28): 0,
                    (76, 26): 0, (76, 24): 0, (76, 22): 0, (76, 20): 0, (76, 18): 0, (76, 16): 0, (76, 14): 10,
                    (76, 12): 20, (76, 10): 20, (76, 8): 20, (76, 6): 30, (76, 4): 40, (76, 2): 60, (74, 30): 0,
                    (74, 28): 0, (74, 26): 0, (74, 24): 0, (74, 22): 0, (74, 20): 0, (74, 18): 0, (74, 16): 10,
                    (74, 14): 10, (74, 12): 20, (74, 10): 20, (74, 8): 20, (74, 6): 30, (74, 4): 40, (74, 2): 60,
                    (72, 30): 0, (72, 28): 0, (72, 26): 0, (72, 24): 0, (72, 22): 0, (72, 20): 0, (72, 18): 0,
                    (72, 16): 10, (72, 14): 10, (72, 12): 20, (72, 10): 20, (72, 8): 20, (72, 6): 30, (72, 4): 40,
                    (72, 2): 60, (70, 30): 0, (70, 28): 0, (70, 26): 0, (70, 24): 0, (70, 22): 0, (70, 20): 10,
                    (70, 18): 10, (70, 16): 10, (70, 14): 10, (70, 12): 30, (70, 10): 30, (70, 8): 30, (70, 6): 40,
                    (70, 4): 50, (70, 2): 70, (68, 30): 0, (68, 28): 0, (68, 26): 0, (68, 24): 0, (68, 22): 0,
                    (68, 20): 10, (68, 18): 10, (68, 16): 10, (68, 14): 10, (68, 12): 30, (68, 10): 30, (68, 8): 30,
                    (68, 6): 40, (68, 4): 50, (68, 2): 70, (66, 30): 0, (66, 28): 0, (66, 26): 0, (66, 24): 0,
                    (66, 22): 0, (66, 20): 10, (66, 18): 10, (66, 16): 10, (66, 14): 10, (66, 12): 30, (66, 10): 30,
                    (66, 8): 35, (66, 6): 40, (66, 4): 50, (66, 2): 70, (64, 30): 0, (64, 28): 0, (64, 26): 0,
                    (64, 24): 0, (64, 22): 0, (64, 20): 10, (64, 18): 10, (64, 16): 10, (64, 14): 10, (64, 12): 30,
                    (64, 10): 30, (64, 8): 35, (64, 6): 40, (64, 4): 50, (64, 2): 70, (62, 30): 0, (62, 28): 0,
                    (62, 26): 0, (62, 24): 0, (62, 22): 0, (62, 20): 10, (62, 18): 10, (62, 16): 10, (62, 14): 10,
                    (62, 12): 30, (62, 10): 30, (62, 8): 35, (62, 6): 40, (62, 4): 50, (62, 2): 70, (60, 30): 0,
                    (60, 28): 0, (60, 26): 0, (60, 24): 0, (60, 22): 0, (60, 20): 10, (60, 18): 10, (60, 16): 10,
                    (60, 14): 10, (60, 12): 30, (60, 10): 30, (60, 8): 35, (60, 6): 40, (60, 4): 50, (60, 2): 70,
                    (58, 30): 0, (58, 28): 0, (58, 26): 0, (58, 24): 0, (58, 22): 0, (58, 20): 10, (58, 18): 10,
                    (58, 16): 10, (58, 14): 10, (58, 12): 30, (58, 10): 30, (58, 8): 35, (58, 6): 40, (58, 4): 50,
                    (58, 2): 70, (56, 30): 0, (56, 28): 0, (56, 26): 0, (56, 24): 0, (56, 22): 0, (56, 20): 10,
                    (56, 18): 10, (56, 16): 10, (56, 14): 10, (56, 12): 30, (56, 10): 30, (56, 8): 35, (56, 6): 40,
                    (56, 4): 50, (56, 2): 70, (54, 30): 0, (54, 28): 0, (54, 26): 0, (54, 24): 0, (54, 22): 0,
                    (54, 20): 10, (54, 18): 10, (54, 16): 10, (54, 14): 10, (54, 12): 30, (54, 10): 30, (54, 8): 35,
                    (54, 6): 40, (54, 4): 50, (54, 2): 70, (52, 30): 0, (52, 28): 0, (52, 26): 0, (52, 24): 0,
                    (52, 22): 0, (52, 20): 10, (52, 18): 10, (52, 16): 10, (52, 14): 10, (52, 12): 30, (52, 10): 30,
                    (52, 8): 35, (52, 6): 40, (52, 4): 50, (52, 2): 70, (50, 30): 0, (50, 28): 0, (50, 26): 0,
                    (50, 24): 0, (50, 22): 0, (50, 20): 20, (50, 18): 20, (50, 16): 20, (50, 14): 20, (50, 12): 40,
                    (50, 10): 40, (50, 8): 45, (50, 6): 50, (50, 4): 60, (50, 2): 80, (48, 30): 0, (48, 28): 0,
                    (48, 26): 0, (48, 24): 0, (48, 22): 0, (48, 20): 20, (48, 18): 20, (48, 16): 20, (48, 14): 20,
                    (48, 12): 40, (48, 10): 40, (48, 8): 45, (48, 6): 50, (48, 4): 60, (48, 2): 80, (46, 30): 0,
                    (46, 28): 0, (46, 26): 0, (46, 24): 0, (46, 22): 0, (46, 20): 20, (46, 18): 20, (46, 16): 20,
                    (46, 14): 20, (46, 12): 40, (46, 10): 40, (46, 8): 45, (46, 6): 50, (46, 4): 60, (46, 2): 80,
                    (44, 30): 0, (44, 28): 0, (44, 26): 0, (44, 24): 0, (44, 22): 0, (44, 20): 20, (44, 18): 20,
                    (44, 16): 20, (44, 14): 20, (44, 12): 40, (44, 10): 40, (44, 8): 45, (44, 6): 50, (44, 4): 60,
                    (44, 2): 80, (42, 30): 0, (42, 28): 0, (42, 26): 0, (42, 24): 0, (42, 22): 0, (42, 20): 20,
                    (42, 18): 20, (42, 16): 20, (42, 14): 20, (42, 12): 40, (42, 10): 40, (42, 8): 45, (42, 6): 50,
                    (42, 4): 60, (42, 2): 80, (40, 30): 0, (40, 28): 0, (40, 26): 0, (40, 24): 0, (40, 22): 0,
                    (40, 20): 20, (40, 18): 20, (40, 16): 20, (40, 14): 20, (40, 12): 40, (40, 10): 40, (40, 8): 45,
                    (40, 6): 50, (40, 4): 60, (40, 2): 80, (38, 30): 0, (38, 28): 0, (38, 26): 0, (38, 24): 0,
                    (38, 22): 0, (38, 20): 20, (38, 18): 20, (38, 16): 20, (38, 14): 20, (38, 12): 40, (38, 10): 40,
                    (38, 8): 45, (38, 6): 50, (38, 4): 60, (38, 2): 90, (36, 30): 0, (36, 28): 0, (36, 26): 0,
                    (36, 24): 0, (36, 22): 0, (36, 20): 20, (36, 18): 20, (36, 16): 20, (36, 14): 20, (36, 12): 40,
                    (36, 10): 40, (36, 8): 45, (36, 6): 50, (36, 4): 60, (36, 2): 90, (34, 30): 0, (34, 28): 0,
                    (34, 26): 0, (34, 24): 0, (34, 22): 0, (34, 20): 20, (34, 18): 20, (34, 16): 20, (34, 14): 20,
                    (34, 12): 40, (34, 10): 40, (34, 8): 45, (34, 6): 50, (34, 4): 60, (34, 2): 100, (32, 30): 0,
                    (32, 28): 0, (32, 26): 0, (32, 24): 0, (32, 22): 0, (32, 20): 20, (32, 18): 20, (32, 16): 20,
                    (32, 14): 20, (32, 12): 40, (32, 10): 40, (32, 8): 45, (32, 6): 50, (32, 4): 60, (32, 2): 100,
                    (30, 30): 10, (30, 28): 10, (30, 26): 10, (30, 24): 10, (30, 22): 10, (30, 20): 30, (30, 18): 30,
                    (30, 16): 30, (30, 14): 30, (30, 12): 50, (30, 10): 50, (30, 8): 55, (30, 6): 60, (30, 4): 70,
                    (30, 2): 100, (28, 30): 10, (28, 28): 10, (28, 26): 10, (28, 24): 10, (28, 22): 10, (28, 20): 30,
                    (28, 18): 30, (28, 16): 30, (28, 14): 30, (28, 12): 50, (28, 10): 50, (28, 8): 55, (28, 6): 60,
                    (28, 4): 70, (28, 2): 100, (26, 30): 10, (26, 28): 10, (26, 26): 10, (26, 24): 10, (26, 22): 10,
                    (26, 20): 30, (26, 18): 30, (26, 16): 30, (26, 14): 30, (26, 12): 50, (26, 10): 50, (26, 8): 55,
                    (26, 6): 60, (26, 4): 70, (26, 2): 100, (24, 30): 10, (24, 28): 10, (24, 26): 10, (24, 24): 10,
                    (24, 22): 10, (24, 20): 30, (24, 18): 30, (24, 16): 30, (24, 14): 30, (24, 12): 50, (24, 10): 50,
                    (24, 8): 55, (24, 6): 60, (24, 4): 70, (24, 2): 100, (22, 30): 10, (22, 28): 10, (22, 26): 10,
                    (22, 24): 10, (22, 22): 10, (22, 20): 30, (22, 18): 30, (22, 16): 30, (22, 14): 30, (22, 12): 50,
                    (22, 10): 50, (22, 8): 55, (22, 6): 60, (22, 4): 70, (22, 2): 100, (20, 30): 10, (20, 28): 10,
                    (20, 26): 10, (20, 24): 10, (20, 22): 10, (20, 20): 30, (20, 18): 30, (20, 16): 30, (20, 14): 30,
                    (20, 12): 50, (20, 10): 50, (20, 8): 55, (20, 6): 60, (20, 4): 70, (20, 2): 100, (18, 30): 10,
                    (18, 28): 10, (18, 26): 10, (18, 24): 10, (18, 22): 10, (18, 20): 30, (18, 18): 30, (18, 16): 30,
                    (18, 14): 30, (18, 12): 50, (18, 10): 50, (18, 8): 55, (18, 6): 60, (18, 4): 70, (18, 2): 100,
                    (16, 30): 10, (16, 28): 10, (16, 26): 10, (16, 24): 10, (16, 22): 10, (16, 20): 30, (16, 18): 30,
                    (16, 16): 30, (16, 14): 30, (16, 12): 50, (16, 10): 50, (16, 8): 55, (16, 6): 60, (16, 4): 70,
                    (16, 2): 100, (14, 30): 10, (14, 28): 10, (14, 26): 10, (14, 24): 10, (14, 22): 10, (14, 20): 30,
                    (14, 18): 30, (14, 16): 30, (14, 14): 30, (14, 12): 50, (14, 10): 50, (14, 8): 55, (14, 6): 60,
                    (14, 4): 70, (14, 2): 100, (12, 30): 10, (12, 28): 10, (12, 26): 10, (12, 24): 10, (12, 22): 10,
                    (12, 20): 30, (12, 18): 30, (12, 16): 30, (12, 14): 30, (12, 12): 50, (12, 10): 50, (12, 8): 55,
                    (12, 6): 60, (12, 4): 70, (12, 2): 100, (10, 30): 20, (10, 28): 20, (10, 26): 20, (10, 24): 20,
                    (10, 22): 20, (10, 20): 30, (10, 18): 30, (10, 16): 30, (10, 14): 30, (10, 12): 50, (10, 10): 50,
                    (10, 8): 60, (10, 6): 70, (10, 4): 80, (10, 2): 100, (8, 30): 20, (8, 28): 20, (8, 26): 20,
                    (8, 24): 20, (8, 22): 20, (8, 20): 30, (8, 18): 30, (8, 16): 30, (8, 14): 30, (8, 12): 50,
                    (8, 10): 50, (8, 8): 60, (8, 6): 70, (8, 4): 80, (8, 2): 100, (6, 30): 20, (6, 28): 20,
                    (6, 26): 20, (6, 24): 20, (6, 22): 20, (6, 20): 30, (6, 18): 30, (6, 16): 30, (6, 14): 30,
                    (6, 12): 50, (6, 10): 50, (6, 8): 60, (6, 6): 70, (6, 4): 80, (6, 2): 100, (4, 30): 20,
                    (4, 28): 20, (4, 26): 20, (4, 24): 20, (4, 22): 20, (4, 20): 30, (4, 18): 30, (4, 16): 30,
                    (4, 14): 30, (4, 12): 50, (4, 10): 50, (4, 8): 60, (4, 6): 70, (4, 4): 80, (4, 2): 100,
                    (2, 30): 20, (2, 28): 20, (2, 26): 20, (2, 24): 20, (2, 22): 20, (2, 20): 30, (2, 18): 30,
                    (2, 16): 30, (2, 14): 30, (2, 12): 50, (2, 10): 50, (2, 8): 60, (2, 6): 70, (2, 4): 80, (2, 2): 100}

#стратегия+шум
# default_strategy={(100, 30): 10, (100, 28): 10, (100, 26): 10, (100, 24): 20, (100, 22): 10, (100, 20): 5, (100, 18): 20, (100, 16): 10, (100, 14): 5, (100, 12): 5, (100, 10): 15, (100, 8): 5, (100, 6): 15, (100, 4): 5, (100, 2): 15, (98, 30): 15, (98, 28): 15, (98, 26): 10, (98, 24): 5, (98, 22): 10, (98, 20): 20, (98, 18): 15, (98, 16): 20, (98, 14): 15, (98, 12): 15, (98, 10): 10, (98, 8): 15, (98, 6): 15, (98, 4): 15, (98, 2): 60, (96, 30): 20, (96, 28): 20, (96, 26): 10, (96, 24): 10, (96, 22): 5, (96, 20): 20, (96, 18): 15, (96, 16): 20, (96, 14): 5, (96, 12): 10, (96, 10): 10, (96, 8): 10, (96, 6): 35, (96, 4): 10, (96, 2): 15, (94, 30): 20, (94, 28): 10, (94, 26): 10, (94, 24): 20, (94, 22): 15, (94, 20): 15, (94, 18): 10, (94, 16): 5, (94, 14): 10, (94, 12): 30, (94, 10): 10, (94, 8): 25, (94, 6): 20, (94, 4): 25, (94, 2): 45, (92, 30): 15, (92, 28): 10, (92, 26): 15, (92, 24): 5, (92, 22): 5, (92, 20): 20, (92, 18): 20, (92, 16): 15, (92, 14): 15, (92, 12): 15, (92, 10): 25, (92, 8): 15, (92, 6): 5, (92, 4): 20, (92, 2): 25, (90, 30): 20, (90, 28): 15, (90, 26): 20, (90, 24): 20, (90, 22): 15, (90, 20): 20, (90, 18): 5, (90, 16): 20, (90, 14): 5, (90, 12): 15, (90, 10): 40, (90, 8): 35, (90, 6): 30, (90, 4): 50, (90, 2): 55, (88, 30): 10, (88, 28): 15, (88, 26): 10, (88, 24): 10, (88, 22): 10, (88, 20): 15, (88, 18): 20, (88, 16): 5, (88, 14): 15, (88, 12): 10, (88, 10): 40, (88, 8): 40, (88, 6): 15, (88, 4): 30, (88, 2): 70, (86, 30): 10, (86, 28): 5, (86, 26): 20, (86, 24): 5, (86, 22): 20, (86, 20): 20, (86, 18): 20, (86, 16): 10, (86, 14): 20, (86, 12): 25, (86, 10): 10, (86, 8): 20, (86, 6): 5, (86, 4): 60, (86, 2): 55, (84, 30): 15, (84, 28): 20, (84, 26): 20, (84, 24): 20, (84, 22): 15, (84, 20): 20, (84, 18): 20, (84, 16): 20, (84, 14): 15, (84, 12): 40, (84, 10): 30, (84, 8): 35, (84, 6): 40, (84, 4): 30, (84, 2): 50, (82, 30): 15, (82, 28): 20, (82, 26): 20, (82, 24): 5, (82, 22): 15, (82, 20): 10, (82, 18): 10, (82, 16): 10, (82, 14): 5, (82, 12): 5, (82, 10): 5, (82, 8): 20, (82, 6): 10, (82, 4): 45, (82, 2): 45, (80, 30): 15, (80, 28): 15, (80, 26): 5, (80, 24): 15, (80, 22): 20, (80, 20): 10, (80, 18): 20, (80, 16): 10, (80, 14): 15, (80, 12): 5, (80, 10): 5, (80, 8): 10, (80, 6): 10, (80, 4): 40, (80, 2): 65, (78, 30): 20, (78, 28): 5, (78, 26): 10, (78, 24): 20, (78, 22): 5, (78, 20): 15, (78, 18): 20, (78, 16): 5, (78, 14): 20, (78, 12): 30, (78, 10): 20, (78, 8): 35, (78, 6): 45, (78, 4): 40, (78, 2): 55, (76, 30): 10, (76, 28): 15, (76, 26): 10, (76, 24): 10, (76, 22): 10, (76, 20): 5, (76, 18): 20, (76, 16): 10, (76, 14): 30, (76, 12): 40, (76, 10): 15, (76, 8): 15, (76, 6): 45, (76, 4): 35, (76, 2): 80, (74, 30): 10, (74, 28): 10, (74, 26): 10, (74, 24): 10, (74, 22): 5, (74, 20): 15, (74, 18): 10, (74, 16): 10, (74, 14): 20, (74, 12): 5, (74, 10): 5, (74, 8): 30, (74, 6): 50, (74, 4): 20, (74, 2): 50, (72, 30): 10, (72, 28): 20, (72, 26): 20, (72, 24): 20, (72, 22): 10, (72, 20): 20, (72, 18): 20, (72, 16): 20, (72, 14): 10, (72, 12): 20, (72, 10): 30, (72, 8): 15, (72, 6): 15, (72, 4): 40, (72, 2): 60, (70, 30): 20, (70, 28): 20, (70, 26): 20, (70, 24): 20, (70, 22): 5, (70, 20): 30, (70, 18): 20, (70, 16): 15, (70, 14): 25, (70, 12): 15, (70, 10): 40, (70, 8): 5, (70, 6): 55, (70, 4): 50, (70, 2): 65, (68, 30): 20, (68, 28): 10, (68, 26): 10, (68, 24): 10, (68, 22): 15, (68, 20): 15, (68, 18): 10, (68, 16): 25, (68, 14): 25, (68, 12): 30, (68, 10): 15, (68, 8): 45, (68, 6): 25, (68, 4): 50, (68, 2): 60, (66, 30): 5, (66, 28): 15, (66, 26): 10, (66, 24): 15, (66, 22): 10, (66, 20): 20, (66, 18): 10, (66, 16): 15, (66, 14): 30, (66, 12): 35, (66, 10): 10, (66, 8): 45, (66, 6): 20, (66, 4): 65, (66, 2): 90, (64, 30): 5, (64, 28): 5, (64, 26): 15, (64, 24): 15, (64, 22): 5, (64, 20): 25, (64, 18): 5, (64, 16): 30, (64, 14): 5, (64, 12): 25, (64, 10): 35, (64, 8): 40, (64, 6): 55, (64, 4): 45, (64, 2): 75, (62, 30): 15, (62, 28): 15, (62, 26): 15, (62, 24): 20, (62, 22): 15, (62, 20): 30, (62, 18): 15, (62, 16): 25, (62, 14): 15, (62, 12): 30, (62, 10): 35, (62, 8): 20, (62, 6): 30, (62, 4): 65, (62, 2): 55, (60, 30): 20, (60, 28): 15, (60, 26): 10, (60, 24): 20, (60, 22): 5, (60, 20): 5, (60, 18): 20, (60, 16): 25, (60, 14): 5, (60, 12): 15, (60, 10): 25, (60, 8): 50, (60, 6): 30, (60, 4): 45, (60, 2): 45, (58, 30): 15, (58, 28): 10, (58, 26): 5, (58, 24): 5, (58, 22): 10, (58, 20): 15, (58, 18): 30, (58, 16): 15, (58, 14): 30, (58, 12): 15, (58, 10): 5, (58, 8): 50, (58, 6): 50, (58, 4): 45, (58, 2): 85, (56, 30): 15, (56, 28): 20, (56, 26): 10, (56, 24): 5, (56, 22): 5, (56, 20): 20, (56, 18): 20, (56, 16): 15, (56, 14): 10, (56, 12): 10, (56, 10): 40, (56, 8): 45, (56, 6): 55, (56, 4): 30, (56, 2): 70, (54, 30): 20, (54, 28): 20, (54, 26): 10, (54, 24): 5, (54, 22): 20, (54, 20): 15, (54, 18): 15, (54, 16): 5, (54, 14): 25, (54, 12): 25, (54, 10): 45, (54, 8): 25, (54, 6): 55, (54, 4): 40, (54, 2): 85, (52, 30): 10, (52, 28): 15, (52, 26): 15, (52, 24): 5, (52, 22): 20, (52, 20): 15, (52, 18): 5, (52, 16): 25, (52, 14): 30, (52, 12): 25, (52, 10): 30, (52, 8): 45, (52, 6): 60, (52, 4): 55, (52, 2): 55, (50, 30): 10, (50, 28): 10, (50, 26): 15, (50, 24): 5, (50, 22): 5, (50, 20): 40, (50, 18): 35, (50, 16): 35, (50, 14): 15, (50, 12): 20, (50, 10): 50, (50, 8): 35, (50, 6): 60, (50, 4): 55, (50, 2): 70, (48, 30): 15, (48, 28): 10, (48, 26): 10, (48, 24): 20, (48, 22): 15, (48, 20): 15, (48, 18): 40, (48, 16): 5, (48, 14): 20, (48, 12): 45, (48, 10): 25, (48, 8): 50, (48, 6): 30, (48, 4): 50, (48, 2): 65, (46, 30): 5, (46, 28): 5, (46, 26): 15, (46, 24): 15, (46, 22): 20, (46, 20): 25, (46, 18): 10, (46, 16): 35, (46, 14): 5, (46, 12): 45, (46, 10): 50, (46, 8): 20, (46, 6): 40, (46, 4): 35, (46, 2): 90, (44, 30): 15, (44, 28): 10, (44, 26): 10, (44, 24): 20, (44, 22): 5, (44, 20): 30, (44, 18): 15, (44, 16): 20, (44, 14): 10, (44, 12): 40, (44, 10): 15, (44, 8): 65, (44, 6): 25, (44, 4): 55, (44, 2): 95, (42, 30): 15, (42, 28): 10, (42, 26): 20, (42, 24): 15, (42, 22): 15, (42, 20): 5, (42, 18): 35, (42, 16): 10, (42, 14): 20, (42, 12): 45, (42, 10): 60, (42, 8): 20, (42, 6): 30, (42, 4): 50, (42, 2): 75, (40, 30): 15, (40, 28): 5, (40, 26): 5, (40, 24): 15, (40, 22): 10, (40, 20): 10, (40, 18): 25, (40, 16): 40, (40, 14): 40, (40, 12): 45, (40, 10): 30, (40, 8): 45, (40, 6): 50, (40, 4): 65, (40, 2): 80, (38, 30): 15, (38, 28): 20, (38, 26): 10, (38, 24): 20, (38, 22): 10, (38, 20): 35, (38, 18): 15, (38, 16): 25, (38, 14): 40, (38, 12): 15, (38, 10): 30, (38, 8): 35, (38, 6): 50, (38, 4): 40, (38, 2): 75, (36, 30): 5, (36, 28): 5, (36, 26): 20, (36, 24): 15, (36, 22): 10, (36, 20): 30, (36, 18): 30, (36, 16): 35, (36, 14): 15, (36, 12): 35, (36, 10): 45, (36, 8): 25, (36, 6): 65, (36, 4): 35, (36, 2): 85, (34, 30): 20, (34, 28): 15, (34, 26): 20, (34, 24): 15, (34, 22): 10, (34, 20): 30, (34, 18): 40, (34, 16): 15, (34, 14): 5, (34, 12): 60, (34, 10): 40, (34, 8): 50, (34, 6): 40, (34, 4): 65, (34, 2): 80, (32, 30): 10, (32, 28): 10, (32, 26): 5, (32, 24): 20, (32, 22): 20, (32, 20): 5, (32, 18): 5, (32, 16): 30, (32, 14): 10, (32, 12): 15, (32, 10): 60, (32, 8): 40, (32, 6): 65, (32, 4): 50, (32, 2): 90, (30, 30): 30, (30, 28): 5, (30, 26): 10, (30, 24): 25, (30, 22): 15, (30, 20): 40, (30, 18): 35, (30, 16): 25, (30, 14): 5, (30, 12): 50, (30, 10): 50, (30, 8): 40, (30, 6): 60, (30, 4): 65, (30, 2): 90, (28, 30): 30, (28, 28): 30, (28, 26): 5, (28, 24): 25, (28, 22): 25, (28, 20): 45, (28, 18): 35, (28, 16): 15, (28, 14): 35, (28, 12): 50, (28, 10): 70, (28, 8): 55, (28, 6): 65, (28, 4): 65, (28, 2): 95, (26, 30): 20, (26, 28): 30, (26, 26): 25, (26, 24): 15, (26, 22): 5, (26, 20): 5, (26, 18): 10, (26, 16): 20, (26, 14): 45, (26, 12): 65, (26, 10): 65, (26, 8): 50, (26, 6): 55, (26, 4): 85, (26, 2): 90, (24, 30): 20, (24, 28): 10, (24, 26): 30, (24, 24): 15, (24, 22): 20, (24, 20): 5, (24, 18): 25, (24, 16): 5, (24, 14): 40, (24, 12): 55, (24, 10): 70, (24, 8): 30, (24, 6): 35, (24, 4): 45, (24, 2): 75, (22, 30): 25, (22, 28): 20, (22, 26): 15, (22, 24): 15, (22, 22): 25, (22, 20): 20, (22, 18): 25, (22, 16): 45, (22, 14): 20, (22, 12): 45, (22, 10): 65, (22, 8): 40, (22, 6): 55, (22, 4): 60, (22, 2): 85, (20, 30): 5, (20, 28): 20, (20, 26): 5, (20, 24): 30, (20, 22): 30, (20, 20): 5, (20, 18): 40, (20, 16): 30, (20, 14): 10, (20, 12): 50, (20, 10): 65, (20, 8): 45, (20, 6): 80, (20, 4): 70, (20, 2): 95, (18, 30): 10, (18, 28): 10, (18, 26): 15, (18, 24): 30, (18, 22): 5, (18, 20): 10, (18, 18): 20, (18, 16): 30, (18, 14): 10, (18, 12): 65, (18, 10): 45, (18, 8): 70, (18, 6): 50, (18, 4): 70, (18, 2): 75, (16, 30): 20, (16, 28): 20, (16, 26): 5, (16, 24): 10, (16, 22): 5, (16, 20): 45, (16, 18): 25, (16, 16): 35, (16, 14): 10, (16, 12): 50, (16, 10): 30, (16, 8): 50, (16, 6): 50, (16, 4): 60, (16, 2): 85, (14, 30): 20, (14, 28): 25, (14, 26): 20, (14, 24): 5, (14, 22): 20, (14, 20): 20, (14, 18): 5, (14, 16): 10, (14, 14): 5, (14, 12): 25, (14, 10): 65, (14, 8): 30, (14, 6): 40, (14, 4): 70, (14, 2): 75, (12, 30): 10, (12, 28): 5, (12, 26): 20, (12, 24): 15, (12, 22): 15, (12, 20): 35, (12, 18): 30, (12, 16): 10, (12, 14): 20, (12, 12): 35, (12, 10): 60, (12, 8): 70, (12, 6): 45, (12, 4): 45, (12, 2): 95, (10, 30): 40, (10, 28): 5, (10, 26): 20, (10, 24): 25, (10, 22): 20, (10, 20): 45, (10, 18): 40, (10, 16): 5, (10, 14): 50, (10, 12): 65, (10, 10): 65, (10, 8): 45, (10, 6): 80, (10, 4): 75, (10, 2): 95, (8, 30): 15, (8, 28): 25, (8, 26): 25, (8, 24): 5, (8, 22): 20, (8, 20): 15, (8, 18): 35, (8, 16): 45, (8, 14): 10, (8, 12): 25, (8, 10): 50, (8, 8): 65, (8, 6): 45, (8, 4): 85, (8, 2): 75, (6, 30): 25, (6, 28): 20, (6, 26): 5, (6, 24): 20, (6, 22): 5, (6, 20): 20, (6, 18): 50, (6, 16): 50, (6, 14): 10, (6, 12): 70, (6, 10): 60, (6, 8): 45, (6, 6): 70, (6, 4): 85, (6, 2): 80, (4, 30): 5, (4, 28): 35, (4, 26): 10, (4, 24): 5, (4, 22): 20, (4, 20): 45, (4, 18): 30, (4, 16): 35, (4, 14): 30, (4, 12): 60, (4, 10): 35, (4, 8): 75, (4, 6): 55, (4, 4): 55, (4, 2): 75, (2, 30): 35, (2, 28): 20, (2, 26): 25, (2, 24): 5, (2, 22): 10, (2, 20): 40, (2, 18): 20, (2, 16): 15, (2, 14): 20, (2, 12): 30, (2, 10): 50, (2, 8): 70, (2, 6): 85, (2, 4): 60, (2, 2): 80}

new_strateg = {(30, 1): 1300.0, (30, 2): 1250.0, (30, 3): 1250.0, (30, 4): 1200.0, (30, 5): 1200.0, (30, 6): 1150.0,
               (30, 7): 1150.0, (30, 8): 1150.0, (30, 9): 1100.0, (30, 10): 1100.0, (30, 11): 1050.0, (30, 12): 1050.0,
               (30, 13): 1000.0, (30, 14): 1000.0, (30, 15): 950.0, (29, 1): 1300.0, (29, 2): 1250.0, (29, 3): 1250.0,
               (29, 4): 1250.0, (29, 5): 1200.0, (29, 6): 1200.0, (29, 7): 1200.0, (29, 8): 1150.0, (29, 9): 1150.0,
               (29, 10): 1100.0, (29, 11): 1100.0, (29, 12): 1100.0, (29, 13): 1050.0, (29, 14): 1050.0,
               (29, 15): 1050.0, (28, 1): 1300.0, (28, 2): 1250.0, (28, 3): 1250.0, (28, 4): 1250.0, (28, 5): 1200.0,
               (28, 6): 1200.0, (28, 7): 1150.0, (28, 8): 1150.0, (28, 9): 1150.0, (28, 10): 1100.0, (28, 11): 1100.0,
               (28, 12): 1100.0, (28, 13): 1050.0, (28, 14): 1050.0, (28, 15): 1050.0, (27, 1): 1300.0, (27, 2): 1250.0,
               (27, 3): 1250.0, (27, 4): 1250.0, (27, 5): 1200.0, (27, 6): 1200.0, (27, 7): 1200.0, (27, 8): 1150.0,
               (27, 9): 1150.0, (27, 10): 1150.0, (27, 11): 1100.0, (27, 12): 1100.0, (27, 13): 1100.0,
               (27, 14): 1050.0, (27, 15): 1050.0, (26, 1): 1300.0, (26, 2): 1300.0, (26, 3): 1250.0, (26, 4): 1250.0,
               (26, 5): 1200.0, (26, 6): 1200.0, (26, 7): 1150.0, (26, 8): 1150.0, (26, 9): 1150.0, (26, 10): 1100.0,
               (26, 11): 1100.0, (26, 12): 1050.0, (26, 13): 1050.0, (26, 14): 1050.0, (26, 15): 1000.0,
               (25, 1): 1300.0, (25, 2): 1250.0, (25, 3): 1250.0, (25, 4): 1250.0, (25, 5): 1200.0, (25, 6): 1200.0,
               (25, 7): 1200.0, (25, 8): 1150.0, (25, 9): 1150.0, (25, 10): 1100.0, (25, 11): 1100.0, (25, 12): 1100.0,
               (25, 13): 1050.0, (25, 14): 1050.0, (25, 15): 1050.0, (24, 1): 1300.0, (24, 2): 1250.0, (24, 3): 1250.0,
               (24, 4): 1250.0, (24, 5): 1200.0, (24, 6): 1200.0, (24, 7): 1200.0, (24, 8): 1150.0, (24, 9): 1150.0,
               (24, 10): 1100.0, (24, 11): 1100.0, (24, 12): 1100.0, (24, 13): 1050.0, (24, 14): 1050.0,
               (24, 15): 1050.0, (23, 1): 1300.0, (23, 2): 1300.0, (23, 3): 1250.0, (23, 4): 1250.0, (23, 5): 1250.0,
               (23, 6): 1200.0, (23, 7): 1200.0, (23, 8): 1150.0, (23, 9): 1150.0, (23, 10): 1150.0, (23, 11): 1100.0,
               (23, 12): 1100.0, (23, 13): 1050.0, (23, 14): 1050.0, (23, 15): 1050.0, (22, 1): 1300.0, (22, 2): 1250.0,
               (22, 3): 1250.0, (22, 4): 1200.0, (22, 5): 1200.0, (22, 6): 1150.0, (22, 7): 1150.0, (22, 8): 1100.0,
               (22, 9): 1100.0, (22, 10): 1050.0, (22, 11): 1050.0, (22, 12): 1000.0, (22, 13): 1000.0, (22, 14): 950.0,
               (22, 15): 950.0, (21, 1): 1350.0, (21, 2): 1350.0, (21, 3): 1300.0, (21, 4): 1250.0, (21, 5): 1250.0,
               (21, 6): 1200.0, (21, 7): 1150.0, (21, 8): 1150.0, (21, 9): 1100.0, (21, 10): 1050.0, (21, 11): 1050.0,
               (21, 12): 1000.0, (21, 13): 950.0, (21, 14): 950.0, (21, 15): 900.0, (20, 1): 1200.0, (20, 2): 1200.0,
               (20, 3): 1200.0, (20, 4): 1200.0, (20, 5): 1200.0, (20, 6): 1150.0, (20, 7): 1150.0, (20, 8): 1150.0,
               (20, 9): 1150.0, (20, 10): 1150.0, (20, 11): 1150.0, (20, 12): 1150.0, (20, 13): 1150.0,
               (20, 14): 1150.0, (20, 15): 1150.0, (19, 1): 1300.0, (19, 2): 1250.0, (19, 3): 1250.0, (19, 4): 1250.0,
               (19, 5): 1250.0, (19, 6): 1200.0, (19, 7): 1200.0, (19, 8): 1200.0, (19, 9): 1200.0, (19, 10): 1150.0,
               (19, 11): 1150.0, (19, 12): 1150.0, (19, 13): 1150.0, (19, 14): 1100.0, (19, 15): 1100.0,
               (18, 1): 1200.0, (18, 2): 1200.0, (18, 3): 1200.0, (18, 4): 1200.0, (18, 5): 1200.0, (18, 6): 1200.0,
               (18, 7): 1150.0, (18, 8): 1150.0, (18, 9): 1150.0, (18, 10): 1150.0, (18, 11): 1150.0, (18, 12): 1150.0,
               (18, 13): 1150.0, (18, 14): 1150.0, (18, 15): 1150.0, (17, 1): 1300.0, (17, 2): 1300.0, (17, 3): 1250.0,
               (17, 4): 1250.0, (17, 5): 1250.0, (17, 6): 1200.0, (17, 7): 1200.0, (17, 8): 1200.0, (17, 9): 1200.0,
               (17, 10): 1150.0, (17, 11): 1150.0, (17, 12): 1150.0, (17, 13): 1150.0, (17, 14): 1100.0,
               (17, 15): 1100.0, (16, 1): 1300.0, (16, 2): 1300.0, (16, 3): 1250.0, (16, 4): 1250.0, (16, 5): 1250.0,
               (16, 6): 1250.0, (16, 7): 1250.0, (16, 8): 1200.0, (16, 9): 1200.0, (16, 10): 1200.0, (16, 11): 1200.0,
               (16, 12): 1150.0, (16, 13): 1150.0, (16, 14): 1150.0, (16, 15): 1150.0, (15, 1): 1300.0, (15, 2): 1300.0,
               (15, 3): 1250.0, (15, 4): 1250.0, (15, 5): 1250.0, (15, 6): 1250.0, (15, 7): 1250.0, (15, 8): 1200.0,
               (15, 9): 1200.0, (15, 10): 1200.0, (15, 11): 1200.0, (15, 12): 1200.0, (15, 13): 1150.0,
               (15, 14): 1150.0, (15, 15): 1150.0, (14, 1): 1300.0, (14, 2): 1300.0, (14, 3): 1250.0, (14, 4): 1250.0,
               (14, 5): 1250.0, (14, 6): 1250.0, (14, 7): 1250.0, (14, 8): 1200.0, (14, 9): 1200.0, (14, 10): 1200.0,
               (14, 11): 1200.0, (14, 12): 1200.0, (14, 13): 1150.0, (14, 14): 1150.0, (14, 15): 1150.0,
               (13, 1): 1300.0, (13, 2): 1300.0, (13, 3): 1250.0, (13, 4): 1250.0, (13, 5): 1250.0, (13, 6): 1200.0,
               (13, 7): 1200.0, (13, 8): 1200.0, (13, 9): 1200.0, (13, 10): 1150.0, (13, 11): 1150.0, (13, 12): 1150.0,
               (13, 13): 1100.0, (13, 14): 1100.0, (13, 15): 1100.0, (12, 1): 1200.0, (12, 2): 1200.0, (12, 3): 1200.0,
               (12, 4): 1200.0, (12, 5): 1150.0, (12, 6): 1150.0, (12, 7): 1150.0, (12, 8): 1150.0, (12, 9): 1150.0,
               (12, 10): 1150.0, (12, 11): 1150.0, (12, 12): 1150.0, (12, 13): 1150.0, (12, 14): 1100.0,
               (12, 15): 1100.0, (11, 1): 1200.0, (11, 2): 1200.0, (11, 3): 1200.0, (11, 4): 1200.0, (11, 5): 1150.0,
               (11, 6): 1150.0, (11, 7): 1150.0, (11, 8): 1150.0, (11, 9): 1150.0, (11, 10): 1150.0, (11, 11): 1150.0,
               (11, 12): 1150.0, (11, 13): 1100.0, (11, 14): 1100.0, (11, 15): 1100.0, (10, 1): 1300.0, (10, 2): 1300.0,
               (10, 3): 1300.0, (10, 4): 1250.0, (10, 5): 1250.0, (10, 6): 1250.0, (10, 7): 1250.0, (10, 8): 1250.0,
               (10, 9): 1250.0, (10, 10): 1200.0, (10, 11): 1200.0, (10, 12): 1200.0, (10, 13): 1200.0,
               (10, 14): 1200.0, (10, 15): 1200.0, (9, 1): 1300.0, (9, 2): 1300.0, (9, 3): 1300.0, (9, 4): 1250.0,
               (9, 5): 1250.0, (9, 6): 1250.0, (9, 7): 1250.0, (9, 8): 1250.0, (9, 9): 1250.0, (9, 10): 1200.0,
               (9, 11): 1200.0, (9, 12): 1200.0, (9, 13): 1200.0, (9, 14): 1200.0, (9, 15): 1200.0, (8, 1): 1300.0,
               (8, 2): 1300.0, (8, 3): 1250.0, (8, 4): 1250.0, (8, 5): 1250.0, (8, 6): 1250.0, (8, 7): 1250.0,
               (8, 8): 1200.0, (8, 9): 1200.0, (8, 10): 1200.0, (8, 11): 1200.0, (8, 12): 1150.0, (8, 13): 1150.0,
               (8, 14): 1150.0, (8, 15): 1150.0, (7, 1): 1300.0, (7, 2): 1300.0, (7, 3): 1250.0, (7, 4): 1250.0,
               (7, 5): 1250.0, (7, 6): 1250.0, (7, 7): 1200.0, (7, 8): 1200.0, (7, 9): 1200.0, (7, 10): 1200.0,
               (7, 11): 1150.0, (7, 12): 1150.0, (7, 13): 1150.0, (7, 14): 1150.0, (7, 15): 1100.0, (6, 1): 1200.0,
               (6, 2): 1200.0, (6, 3): 1200.0, (6, 4): 1150.0, (6, 5): 1150.0, (6, 6): 1150.0, (6, 7): 1150.0,
               (6, 8): 1150.0, (6, 9): 1100.0, (6, 10): 1100.0, (6, 11): 1100.0, (6, 12): 1100.0, (6, 13): 1100.0,
               (6, 14): 1100.0, (6, 15): 1050.0, (5, 1): 1200.0, (5, 2): 1200.0, (5, 3): 1200.0, (5, 4): 1150.0,
               (5, 5): 1150.0, (5, 6): 1150.0, (5, 7): 1150.0, (5, 8): 1150.0, (5, 9): 1100.0, (5, 10): 1100.0,
               (5, 11): 1100.0, (5, 12): 1100.0, (5, 13): 1100.0, (5, 14): 1050.0, (5, 15): 1050.0, (4, 1): 1200.0,
               (4, 2): 1200.0, (4, 3): 1200.0, (4, 4): 1150.0, (4, 5): 1150.0, (4, 6): 1150.0, (4, 7): 1150.0,
               (4, 8): 1150.0, (4, 9): 1150.0, (4, 10): 1100.0, (4, 11): 1100.0, (4, 12): 1100.0, (4, 13): 1100.0,
               (4, 14): 1100.0, (4, 15): 1050.0, (3, 1): 1200.0, (3, 2): 1200.0, (3, 3): 1200.0, (3, 4): 1150.0,
               (3, 5): 1150.0, (3, 6): 1150.0, (3, 7): 1150.0, (3, 8): 1150.0, (3, 9): 1100.0, (3, 10): 1100.0,
               (3, 11): 1100.0, (3, 12): 1100.0, (3, 13): 1100.0, (3, 14): 1050.0, (3, 15): 1050.0, (2, 1): 1050.0,
               (2, 2): 1050.0, (2, 3): 1000.0, (2, 4): 1000.0, (2, 5): 1000.0, (2, 6): 1000.0, (2, 7): 1000.0,
               (2, 8): 1000.0, (2, 9): 1000.0, (2, 10): 950.0, (2, 11): 950.0, (2, 12): 950.0, (2, 13): 950.0,
               (2, 14): 950.0, (2, 15): 950.0, (1, 1): 1050.0, (1, 2): 1050.0, (1, 3): 1050.0, (1, 4): 1000.0,
               (1, 5): 1000.0, (1, 6): 1000.0, (1, 7): 1000.0, (1, 8): 1000.0, (1, 9): 1000.0, (1, 10): 1000.0,
               (1, 11): 950.0, (1, 12): 950.0, (1, 13): 950.0, (1, 14): 950.0, (1, 15): 950.0, (0, 1): 1050.0,
               (0, 2): 1050.0, (0, 3): 1050.0, (0, 4): 1050.0, (0, 5): 1000.0, (0, 6): 1000.0, (0, 7): 1000.0,
               (0, 8): 1000.0, (0, 9): 1000.0, (0, 10): 1000.0, (0, 11): 1000.0, (0, 12): 1000.0, (0, 13): 1000.0,
               (0, 14): 1000.0, (0, 15): 1000.0}

new_strateg={(30, 1): 1350.0, (30, 2): 1300.0, (30, 3): 1300.0, (30, 4): 1250.0, (30, 5): 1250.0, (30, 6): 1200.0, (30, 7): 1200.0, (30, 8): 1200.0, (30, 9): 1150.0, (30, 10): 1150.0, (30, 11): 1100.0, (30, 12): 1100.0, (30, 13): 1050.0, (30, 14): 1050.0, (30, 15): 1000.0, (29, 1): 1350.0, (29, 2): 1300.0, (29, 3): 1300.0, (29, 4): 1300.0, (29, 5): 1250.0, (29, 6): 1250.0, (29, 7): 1250.0, (29, 8): 1200.0, (29, 9): 1200.0, (29, 10): 1150.0, (29, 11): 1150.0, (29, 12): 1150.0, (29, 13): 1100.0, (29, 14): 1100.0, (29, 15): 1100.0, (28, 1): 1350.0, (28, 2): 1300.0, (28, 3): 1300.0, (28, 4): 1300.0, (28, 5): 1250.0, (28, 6): 1250.0, (28, 7): 1200.0, (28, 8): 1200.0, (28, 9): 1200.0, (28, 10): 1150.0, (28, 11): 1150.0, (28, 12): 1150.0, (28, 13): 1100.0, (28, 14): 1100.0, (28, 15): 1100.0, (27, 1): 1350.0, (27, 2): 1300.0, (27, 3): 1300.0, (27, 4): 1300.0, (27, 5): 1250.0, (27, 6): 1250.0, (27, 7): 1250.0, (27, 8): 1200.0, (27, 9): 1200.0, (27, 10): 1200.0, (27, 11): 1150.0, (27, 12): 1150.0, (27, 13): 1150.0, (27, 14): 1100.0, (27, 15): 1100.0, (26, 1): 1350.0, (26, 2): 1350.0, (26, 3): 1300.0, (26, 4): 1300.0, (26, 5): 1250.0, (26, 6): 1250.0, (26, 7): 1200.0, (26, 8): 1200.0, (26, 9): 1200.0, (26, 10): 1150.0, (26, 11): 1150.0, (26, 12): 1100.0, (26, 13): 1100.0, (26, 14): 1100.0, (26, 15): 1050.0, (25, 1): 1350.0, (25, 2): 1300.0, (25, 3): 1300.0, (25, 4): 1300.0, (25, 5): 1250.0, (25, 6): 1250.0, (25, 7): 1250.0, (25, 8): 1200.0, (25, 9): 1200.0, (25, 10): 1150.0, (25, 11): 1150.0, (25, 12): 1150.0, (25, 13): 1100.0, (25, 14): 1100.0, (25, 15): 1100.0, (24, 1): 1350.0, (24, 2): 1300.0, (24, 3): 1300.0, (24, 4): 1300.0, (24, 5): 1250.0, (24, 6): 1250.0, (24, 7): 1250.0, (24, 8): 1200.0, (24, 9): 1200.0, (24, 10): 1150.0, (24, 11): 1150.0, (24, 12): 1150.0, (24, 13): 1100.0, (24, 14): 1100.0, (24, 15): 1100.0, (23, 1): 1350.0, (23, 2): 1350.0, (23, 3): 1300.0, (23, 4): 1300.0, (23, 5): 1300.0, (23, 6): 1250.0, (23, 7): 1250.0, (23, 8): 1200.0, (23, 9): 1200.0, (23, 10): 1200.0, (23, 11): 1150.0, (23, 12): 1150.0, (23, 13): 1100.0, (23, 14): 1100.0, (23, 15): 1100.0, (22, 1): 1350.0, (22, 2): 1300.0, (22, 3): 1300.0, (22, 4): 1250.0, (22, 5): 1250.0, (22, 6): 1200.0, (22, 7): 1200.0, (22, 8): 1150.0, (22, 9): 1150.0, (22, 10): 1100.0, (22, 11): 1100.0, (22, 12): 1050.0, (22, 13): 1050.0, (22, 14): 1000.0, (22, 15): 1000.0, (21, 1): 1400.0, (21, 2): 1400.0, (21, 3): 1350.0, (21, 4): 1300.0, (21, 5): 1300.0, (21, 6): 1250.0, (21, 7): 1200.0, (21, 8): 1200.0, (21, 9): 1150.0, (21, 10): 1100.0, (21, 11): 1100.0, (21, 12): 1050.0, (21, 13): 1000.0, (21, 14): 1000.0, (21, 15): 950.0, (20, 1): 1250.0, (20, 2): 1250.0, (20, 3): 1250.0, (20, 4): 1250.0, (20, 5): 1250.0, (20, 6): 1200.0, (20, 7): 1200.0, (20, 8): 1200.0, (20, 9): 1200.0, (20, 10): 1200.0, (20, 11): 1200.0, (20, 12): 1200.0, (20, 13): 1200.0, (20, 14): 1200.0, (20, 15): 1200.0, (19, 1): 1250.0, (19, 2): 1250.0, (19, 3): 1250.0, (19, 4): 1250.0, (19, 5): 1200.0, (19, 6): 1200.0, (19, 7): 1200.0, (19, 8): 1200.0, (19, 9): 1200.0, (19, 10): 1200.0, (19, 11): 1200.0, (19, 12): 1150.0, (19, 13): 1150.0, (19, 14): 1150.0, (19, 15): 1150.0, (18, 1): 1250.0, (18, 2): 1250.0, (18, 3): 1250.0, (18, 4): 1250.0, (18, 5): 1250.0, (18, 6): 1250.0, (18, 7): 1200.0, (18, 8): 1200.0, (18, 9): 1200.0, (18, 10): 1200.0, (18, 11): 1200.0, (18, 12): 1200.0, (18, 13): 1200.0, (18, 14): 1200.0, (18, 15): 1200.0, (17, 1): 1250.0, (17, 2): 1250.0, (17, 3): 1250.0, (17, 4): 1250.0, (17, 5): 1200.0, (17, 6): 1200.0, (17, 7): 1200.0, (17, 8): 1200.0, (17, 9): 1200.0, (17, 10): 1200.0, (17, 11): 1200.0, (17, 12): 1150.0, (17, 13): 1150.0, (17, 14): 1150.0, (17, 15): 1150.0, (16, 1): 1250.0, (16, 2): 1250.0, (16, 3): 1250.0, (16, 4): 1250.0, (16, 5): 1250.0, (16, 6): 1250.0, (16, 7): 1200.0, (16, 8): 1200.0, (16, 9): 1200.0, (16, 10): 1200.0, (16, 11): 1200.0, (16, 12): 1200.0, (16, 13): 1200.0, (16, 14): 1200.0, (16, 15): 1150.0, (15, 1): 1250.0, (15, 2): 1250.0, (15, 3): 1250.0, (15, 4): 1250.0, (15, 5): 1250.0, (15, 6): 1250.0, (15, 7): 1250.0, (15, 8): 1250.0, (15, 9): 1200.0, (15, 10): 1200.0, (15, 11): 1200.0, (15, 12): 1200.0, (15, 13): 1200.0, (15, 14): 1200.0, (15, 15): 1200.0, (14, 1): 1300.0, (14, 2): 1250.0, (14, 3): 1250.0, (14, 4): 1250.0, (14, 5): 1250.0, (14, 6): 1250.0, (14, 7): 1250.0, (14, 8): 1250.0, (14, 9): 1200.0, (14, 10): 1200.0, (14, 11): 1200.0, (14, 12): 1200.0, (14, 13): 1200.0, (14, 14): 1200.0, (14, 15): 1200.0, (13, 1): 1350.0, (13, 2): 1350.0, (13, 3): 1300.0, (13, 4): 1300.0, (13, 5): 1300.0, (13, 6): 1250.0, (13, 7): 1250.0, (13, 8): 1250.0, (13, 9): 1250.0, (13, 10): 1200.0, (13, 11): 1200.0, (13, 12): 1200.0, (13, 13): 1150.0, (13, 14): 1150.0, (13, 15): 1150.0, (12, 1): 1150.0, (12, 2): 1150.0, (12, 3): 1150.0, (12, 4): 1150.0, (12, 5): 1150.0, (12, 6): 1150.0, (12, 7): 1150.0, (12, 8): 1150.0, (12, 9): 1150.0, (12, 10): 1150.0, (12, 11): 1150.0, (12, 12): 1100.0, (12, 13): 1100.0, (12, 14): 1100.0, (12, 15): 1100.0, (11, 1): 1250.0, (11, 2): 1250.0, (11, 3): 1250.0, (11, 4): 1250.0, (11, 5): 1200.0, (11, 6): 1200.0, (11, 7): 1200.0, (11, 8): 1200.0, (11, 9): 1200.0, (11, 10): 1200.0, (11, 11): 1200.0, (11, 12): 1200.0, (11, 13): 1150.0, (11, 14): 1150.0, (11, 15): 1150.0, (10, 1): 1250.0, (10, 2): 1250.0, (10, 3): 1250.0, (10, 4): 1250.0, (10, 5): 1250.0, (10, 6): 1250.0, (10, 7): 1200.0, (10, 8): 1200.0, (10, 9): 1200.0, (10, 10): 1200.0, (10, 11): 1200.0, (10, 12): 1200.0, (10, 13): 1200.0, (10, 14): 1150.0, (10, 15): 1150.0, (9, 1): 1250.0, (9, 2): 1250.0, (9, 3): 1250.0, (9, 4): 1250.0, (9, 5): 1250.0, (9, 6): 1250.0, (9, 7): 1200.0, (9, 8): 1200.0, (9, 9): 1200.0, (9, 10): 1200.0, (9, 11): 1200.0, (9, 12): 1200.0, (9, 13): 1200.0, (9, 14): 1200.0, (9, 15): 1150.0, (8, 1): 1300.0, (8, 2): 1300.0, (8, 3): 1250.0, (8, 4): 1250.0, (8, 5): 1250.0, (8, 6): 1250.0, (8, 7): 1250.0, (8, 8): 1200.0, (8, 9): 1200.0, (8, 10): 1200.0, (8, 11): 1200.0, (8, 12): 1200.0, (8, 13): 1150.0, (8, 14): 1150.0, (8, 15): 1150.0, (7, 1): 1300.0, (7, 2): 1300.0, (7, 3): 1300.0, (7, 4): 1250.0, (7, 5): 1250.0, (7, 6): 1250.0, (7, 7): 1250.0, (7, 8): 1250.0, (7, 9): 1200.0, (7, 10): 1200.0, (7, 11): 1200.0, (7, 12): 1200.0, (7, 13): 1150.0, (7, 14): 1150.0, (7, 15): 1150.0, (6, 1): 1250.0, (6, 2): 1250.0, (6, 3): 1250.0, (6, 4): 1250.0, (6, 5): 1200.0, (6, 6): 1200.0, (6, 7): 1200.0, (6, 8): 1200.0, (6, 9): 1200.0, (6, 10): 1200.0, (6, 11): 1200.0, (6, 12): 1150.0, (6, 13): 1150.0, (6, 14): 1150.0, (6, 15): 1150.0, (5, 1): 1250.0, (5, 2): 1250.0, (5, 3): 1250.0, (5, 4): 1250.0, (5, 5): 1250.0, (5, 6): 1200.0, (5, 7): 1200.0, (5, 8): 1200.0, (5, 9): 1200.0, (5, 10): 1200.0, (5, 11): 1200.0, (5, 12): 1200.0, (5, 13): 1200.0, (5, 14): 1150.0, (5, 15): 1150.0, (4, 1): 1250.0, (4, 2): 1250.0, (4, 3): 1250.0, (4, 4): 1250.0, (4, 5): 1200.0, (4, 6): 1200.0, (4, 7): 1200.0, (4, 8): 1200.0, (4, 9): 1200.0, (4, 10): 1200.0, (4, 11): 1200.0, (4, 12): 1200.0, (4, 13): 1150.0, (4, 14): 1150.0, (4, 15): 1150.0, (3, 1): 1300.0, (3, 2): 1300.0, (3, 3): 1300.0, (3, 4): 1250.0, (3, 5): 1250.0, (3, 6): 1250.0, (3, 7): 1250.0, (3, 8): 1250.0, (3, 9): 1250.0, (3, 10): 1250.0, (3, 11): 1200.0, (3, 12): 1200.0, (3, 13): 1200.0, (3, 14): 1200.0, (3, 15): 1200.0, (2, 1): 1050.0, (2, 2): 1050.0, (2, 3): 1050.0, (2, 4): 1050.0, (2, 5): 1050.0, (2, 6): 1050.0, (2, 7): 1050.0, (2, 8): 1050.0, (2, 9): 1050.0, (2, 10): 1050.0, (2, 11): 1050.0, (2, 12): 1000.0, (2, 13): 1000.0, (2, 14): 1000.0, (2, 15): 1000.0, (1, 1): 1100.0, (1, 2): 1050.0, (1, 3): 1050.0, (1, 4): 1050.0, (1, 5): 1050.0, (1, 6): 1050.0, (1, 7): 1050.0, (1, 8): 1050.0, (1, 9): 1050.0, (1, 10): 1050.0, (1, 11): 1050.0, (1, 12): 1050.0, (1, 13): 1000.0, (1, 14): 1000.0, (1, 15): 1000.0, (0, 1): 1100.0, (0, 2): 1050.0, (0, 3): 1050.0, (0, 4): 1050.0, (0, 5): 1050.0, (0, 6): 1050.0, (0, 7): 1050.0, (0, 8): 1050.0, (0, 9): 1050.0, (0, 10): 1050.0, (0, 11): 1050.0, (0, 12): 1050.0, (0, 13): 1050.0, (0, 14): 1050.0, (0, 15): 1050.0}




class Request:
    """
    класс, описивающий свойства запроса на бронирование
    """

    def __init__(self, LoS=None, persons=None, depth=None, cancelation=None):
        """
        :param LoS: продолжительность заказа
        :param persons: число гостей
        :param depth: глубина бронирования
        :param cancelation: глубина отмены бронирования
        """
        self.LoS = LoS
        self.persons = persons
        self.depth = depth
        self.cancelation_day = cancelation

    def fill(self, day):
        """
        переводит данные запроса на конкретный день.
        :param day: номер дня, в который приходит запрос
        :return: None
        """
        self.start_day = self.depth + day
        self.end_day = self.start_day + self.LoS
        self.booking_day = day

        if self.cancelation_day is not None:
            self.cancelation_day = self.start_day - self.cancelation_day


class EventGenerator:
    """
    Класс, отвечающий за генерацию запросов
    """

    def __init__(self, rv_LoS=None, rv_persons=None, rv_depth=None, rv_request_number=None, rv_cancelation=None,
                 mu=None):
        """
        Инициализация
        :param rv_LoS: распределение продолжительности заказа
        :param rv_persons: распределение числа гостей
        :param rv_depth: распределение глубины бронирования
        :param rv_request_number: распределение числа запросов
        :param rv_cancelation: распределение отмены броней
        :param mu: интенсивность прибытия
        """

        if not rv_LoS:  # дискретное заполнение вероятностными величинами
            x_LoS = np.arange(1, 9)
            y_LoS = [0.382844, 0.217141, 0.153037, 0.100752, 0.059283, 0.038609, 0.033461, 0.014873]
            self.rv_LoS = stats.rv_discrete(name='LoS', values=(x_LoS, y_LoS))
        else:
            self.rv_LoS = rv_LoS

        if not rv_persons:
            x_persons = np.arange(1, 6)
            y_persons = [0.607341, 0.326343, 0.053066, 0.011490, 0.001760]
            self.rv_persons = stats.rv_discrete(name='persons', values=(x_persons, y_persons))
        else:
            self.rv_persons = rv_persons

        if not rv_depth:
            x_depth = np.arange(31)
            y_depth = [0.215860, 0.119922, 0.081003, 0.063378, 0.049164, 0.040811, 0.035930,
                       0.030865, 0.028687, 0.027782, 0.023071, 0.021199, 0.020164, 0.018959,
                       0.019762, 0.017536, 0.017516, 0.016372, 0.015004, 0.013438, 0.014983,
                       0.012648, 0.012206, 0.012499, 0.011484, 0.010770, 0.010136, 0.010729,
                       0.009490, 0.009517, 0.009115]
            self.rv_depth = stats.rv_discrete(name='depth', values=(x_depth, y_depth))
        else:
            self.rv_depth = rv_depth

        if not rv_request_number:
            self.rv_request_number = poisson(mu)  # пуассоновское распределение

        if not rv_cancelation:
            chance = 0.25
            self.rv_cancelation = bernoulli(chance)  # распределение бернули(будет отмена или нет)

    def generate_cancelation(self, depth):
        """
        Генерация отмен брони. Фиксируем 40% отмен в последний день с распределением отмен
        ((R + 1 - i) / (R + 1)) ** alpha - ((R - i) / (R + 1)) ** alpha. тогда alpha = np.log(0.6) / np.log(R / (R + 1))
        :param depth: глубина заказа
        :return: глубина отмены
        """
        if self.rv_cancelation.rvs():  # случайная выборка данных(если все таки отмена)
            if depth == 0:
                return None

            R = depth
            i = np.arange(R + 1)
            alpha = np.log(0.6) / np.log(R / (R + 1))
            y = ((R + 1 - i) / (R + 1)) ** alpha - ((R - i) / (R + 1)) ** alpha
            rv_cancelation_distribution = stats.rv_discrete(name='cancel', values=(i, y))
            return rv_cancelation_distribution.rvs()
        else:
            return None

    def generate_one_request(self):
        """
        Генерация запроса на бронирование в соответствии с распределениями
        :return: экземпляр класса Request
        """
        LoS = self.rv_LoS.rvs()
        persons = self.rv_persons.rvs()
        depth = self.rv_depth.rvs()
        cancelation = self.generate_cancelation(depth)
        return Request(LoS, persons, depth, cancelation)

    def generate_requests(self):
        """
        Генерация запросов на бронирование в соответствии с распределением
        :return:
        """
        number_of_requests = self.rv_request_number.rvs()
        requests = []
        for k in range(number_of_requests):
            requests.append(self.generate_one_request())
        return requests


class Hotel:
    """
    Класс, описыающие состояние отеля
    """

    def __init__(self, number_of_rooms=15, number_of_days=365):
        """
        Инициализация. Задание свойств отеля
        :param number_of_rooms: число номеров
        :param number_of_days: число дней для симуляции
        """
        self.number_of_rooms = number_of_rooms
        self.number_of_days = number_of_days
        self.state = np.zeros([self.number_of_rooms, self.number_of_days])
        self.cancel_days = defaultdict(list)
        self.bookings = defaultdict(dict)  # day -> {uid --> data}

    def is_vacant(self, request):
        """
        Проверка, есть ли свободные места для данного запроса
        :param request: запрос
        :return: номера свободных комнат
        """
        nights = self.state[:, request.start_day: request.end_day + 1]  # проверка каждой комнаты в этот срок
        indices = []
        for idx, row in enumerate(nights):
            if sum(row) == 0:
                indices.append(idx)  # если свободно, добавляет номер комнаты
        if len(indices) >= request.persons:  # если кол-во комнат хватает, передаем все варианты
            return indices
        else:
            return []

    def booking(self, request, rooms, id, price):
        """
        Бронирование заказа
        :param request: заказ
        :param rooms: комнаты
        :param id: номер заказа
        :param price: цена бронирования
        :return: None
        """
        for k in range(request.persons):
            self.state[rooms[k], request.start_day: request.end_day + 1] = id

        # регистрируем дату отмены
        if request.cancelation_day is not None:
            self.cancel_days[request.cancelation_day].append(
                (id, rooms[0:request.persons], request.start_day, request.end_day))

        # добавляем в список заказов
        self.bookings[request.start_day][id] = {'price_per_person': price, 'request': request}

    def get_loading(self, days):
        """
        Загрузка отеля
        :param days: интересующий день (или дни)
        :return: число занятых номеров
        """
        if type(days) == int and days >= self.number_of_days:
            return 0

        return np.count_nonzero(self.state[:, days], axis=0)  # считает по столбцам определенного дня

    def cancel_request(self, day):
        """
        Регистрируем отмену брони
        :param day: день отмены
        :return: None
        """
        for data in self.cancel_days[day]:
            id, rooms, start_day, end_day = data
            for room in rooms:
                self.state[room, start_day: end_day + 1] = 0

            self.bookings[start_day].pop(id)

    def get_revenue(self, day):
        """
        Получаем выручку за указанный день
        :param day: интересующий день
        :return: выручка
        """
        revenue = 0
        for id in self.bookings[day]:
            revenue += self.bookings[day][id]['price_per_person'] * self.bookings[day][id]['request'].persons
        return revenue

    def get_number_sales_day(self, day, number_of_request, number_of_requests):
        """
        поиск кол-ва заказов в определенный день глубины бронирования в заданный день

        :param day:день поиска
        :return:день->{цена:кол-во}
        """
        dict_day = {(i, j): 0 for i in range(365) for j in range(31)}
        number_of_sales = defaultdict(dict)
        for id in self.bookings[day]:

            if self.bookings[day][id]['request'].depth not in number_of_request.keys():
                number_of_request[self.bookings[day][id]['request'].depth] = 1
                dict_day[(day, self.bookings[day][id]['request'].depth)] = 1
            else:
                if dict_day[(day, self.bookings[day][id]['request'].depth)] == 0:
                    number_of_request[self.bookings[day][id]['request'].depth] += 1

            if self.bookings[day][id]['request'].depth not in number_of_requests.keys():
                number_of_requests[self.bookings[day][id]['request'].depth] = self.bookings[day][id]['request'].persons
            else:
                number_of_requests[self.bookings[day][id]['request'].depth] += self.bookings[day][id]['request'].persons

            if self.bookings[day][id]['price_per_person'] not in number_of_sales[
                self.bookings[day][id]['request'].depth].keys():
                number_of_sales[self.bookings[day][id]['request'].depth][self.bookings[day][id]['price_per_person']] = \
                self.bookings[day][id]['request'].persons
            else:
                number_of_sales[self.bookings[day][id]['request'].depth][self.bookings[day][id]['price_per_person']] += \
                self.bookings[day][id]['request'].persons
        return number_of_sales

    def get_number_seles_year(self):
        number_of_sales = defaultdict(dict)  # история покупок(обращений) за определенный день глубины бронирования
        number_of_requests = defaultdict(
            dict)  # кол-во заказов в определенный день глубины бронирования(с учетом кол-во людей в одном заказе)
        number_of_request = defaultdict()  # кол-во заказов в определенный день глубины бронирования(без учета кол-во людей в одном заказе)

        for day in range(365):
            a = self.get_number_sales_day(day, number_of_request, number_of_requests)
            for i in a.keys():
                for j in a[i].keys():
                    if j not in number_of_sales[i].keys():
                        number_of_sales[i][j] = a[i][j]
                    else:
                        number_of_sales[i][j] += a[i][j]
        # print(number_of_request)
        # print(number_of_requests)
        # print(number_of_sales)
        return [number_of_request, number_of_requests, number_of_sales]


class AcceptanceRule:
    """
    Эластичность спроса по цене: при цене, равной номинальной, вероятность принятия запроса 0.5.
    При другой цене вероятность принятия 1 - Phi(rho (price_{algo} - price_{nominal})),
    где Phi -- cdf стандартного нормального распределения, а rho таким образом, что вероятность принятия при
    отклонении на 50% от номинальной цены 0 и 1 соответственно.
    Здесь price_{algo} и price_{nominal} нормированы относительно price_{nominal}, т.е. price_{nominal} = 1.
    """

    def __init__(self, nominal_price=None, rho=None):
        """
        Инициализация
        :param nominal_price: номинальная цена
        :param rho: параметр rho
        """
        if not nominal_price:
            self.nominal_price = 1000
        else:
            self.nominal_price = nominal_price

        if not rho:
            self.rho = 4.66

    def decision(self, price):
        """
        Принятие решения о бронировании при указанной цене
        :param price: цена
        :return: забронировали или нет
        """
        acceptance_chance = 1 - norm.cdf(self.rho * (price / self.nominal_price - 1))
        return bernoulli(acceptance_chance).rvs()


def ceil_to_base(x, base=2):
    if x == 0:
        return base
    return int(base * np.ceil(x / base))


class PricingDefault:
    """
    Дефолтная стратегия ценообразования
    """

    def __init__(self, nominal_price):
        self.BAR = nominal_price
        self.RackRate = 1.5 * nominal_price  # максимальная цена
        self.Netto = 0.5 * nominal_price  # минимальная цена

    def set_price(self, hotel, request):
        load = hotel.get_loading(request.start_day) / hotel.number_of_rooms * 100
        load = ceil_to_base(load)

        depth = request.depth
        depth = ceil_to_base(depth)

        value = default_strategy[(load, depth)] / 100

        return self.RackRate - (self.RackRate - self.Netto) * value


class PricingConstant:
    """
    Константная цена
    """

    def __init__(self, price):
        self.price = price

    def set_price(self, hotel, request):
        return self.price


def simulate():
    """
    Симуляция деятельности отеля
    :return: общая выручка
    """
    history_price=[]
    number_of_days = 365
    nominal_price = 1000
    mu = 30  # интенсивность прибытия

    event = EventGenerator(mu=mu)
    hotel = Hotel(number_of_days=number_of_days)
    acceptance = AcceptanceRule(nominal_price=nominal_price)
    pricing = PricingConstant(1000)
    # pricing = PricingDefault(1000)

    total_revenue = 0
    uid = 1

    for day in range(365):

        requests = event.generate_requests()
        for request in requests:
            request.fill(day)
            # проверяем, есть ли места
            vacant_rooms = hotel.is_vacant(request)
            if len(vacant_rooms):
                # устанавливаем цену

                # старая стратегия
                price = pricing.set_price(hotel, request)

                # новая стратегия
                # price=new_strateg[(request.depth,len(vacant_rooms))]

                # проверяем, устраивает ли цена
                if acceptance.decision(price):
                    hotel.booking(request, vacant_rooms, uid, price)

            uid += 1
        # удаляем отменённые заказы
        hotel.cancel_request(day)
        # считаем выручку за день. Деньги за всех гостей за всё время проживания поступают сразу в день заезда
        revenue = hotel.get_revenue(day)
        total_revenue += revenue

        if (day+1)%90==0 or day==364:

            if day==364:
                history_price[-1]=total_revenue-sum(history_price[:3])
            else: history_price.append(total_revenue-sum(history_price))
    print(history_price)
    return [total_revenue]


# Симулируем N_sim раз и считаем среднюю выручку и её дисперсию при заданной стратегии
res = []

for k in tqdm(range(N_sim)):
    np.random.seed(k)
    a = simulate()
    res.append(a)
print(np.mean(res), np.std(res))
